// <auto-generated />
using System;
using ContentManagerr.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContentManagerr.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationLanguage", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationsId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("ApplicationLanguage");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Sluggish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ActiveVersionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.ArticleVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ArticleVersions");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguagesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LanguageUser");
                });

            modelBuilder.Entity("ApplicationLanguage", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentManagerr.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Application", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Applications")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Article", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.ArticleVersion", "ActiveVersion")
                        .WithMany()
                        .HasForeignKey("ActiveVersionId");

                    b.HasOne("ContentManagerr.Domain.Entities.Application", "Application")
                        .WithMany("Articles")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("ActiveVersion");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.ArticleVersion", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Article", "Article")
                        .WithMany("ArticleVersions")
                        .HasForeignKey("ArticleId");

                    b.HasOne("ContentManagerr.Domain.Entities.User", "CreatedBy")
                        .WithMany("ArticleVersionsCreated")
                        .HasForeignKey("CreatedById");

                    b.HasOne("ContentManagerr.Domain.Entities.User", "DeletedBy")
                        .WithMany("ArticleVersionsDeleted")
                        .HasForeignKey("DeletedById");

                    b.HasOne("ContentManagerr.Domain.Entities.Language", "Language")
                        .WithMany("ArticleVersions")
                        .HasForeignKey("LanguageId");

                    b.HasOne("ContentManagerr.Domain.Entities.User", "UpdatedBy")
                        .WithMany("ArticleVersionsUpdated")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Article");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Language");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Language", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Translation", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Application", "Application")
                        .WithMany("Translations")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ContentManagerr.Domain.Entities.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Application");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.User", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.HasOne("ContentManagerr.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContentManagerr.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Application", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleVersions");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Language", b =>
                {
                    b.Navigation("ArticleVersions");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ContentManagerr.Domain.Entities.User", b =>
                {
                    b.Navigation("ArticleVersionsCreated");

                    b.Navigation("ArticleVersionsDeleted");

                    b.Navigation("ArticleVersionsUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
